# -*- coding: utf-8 -*-
#Le successive analisi andranno a considerare solamente la distribuzione del coefficiente α in corrispondenza di 140 rpm, poiché le grandezze relative alle due fasi,
#benché separate, appaiono spesso generate dalla stessa distribuzione. Come conseguenza di ciò, effettuare un’analisi anche sulla distribuzione osservata in corrispondenza
#della fase a regime (2300 rpm) rivelerebbe comportamenti analoghi. Tale coefficiente in fase di controllo è calcolato con la seguente formula
#(https://github.com/RCrvro/Industry-Lab---Progetto/blob/master/AnalisiPreliminare.ipynb): \alpha_{140}=\frac{108.36-\text{Media portata (@140)}}{\text{Media pressione (@140)}}
#Il set di regressori da cui i vari modelli sono stati generati comprende, però, anche le grandezze relative alla fase a regime (2300 rpm): le due fasi si rivelano infatti strettamente connesse,
#in quanto sono consecutive all’interno del circuito pneumatico di prova, ed è perciò ragionevole supporre che esista un legame fra i rispettivi risultati. L’evidenza empirica di questo fenomeno viene
#rilevata nel già citato elevato grado di correlazione lineare fra le colonne (come visto dalle analisi nel file al link https://github.com/RCrvro/Industry-Lab---Progetto/blob/master/AnalisiPreliminare.ipynb).

"""Ridge_Lasso.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U0CDF_o_sCMcPyf4bipLtOy_30j7Rs1p

# Ridge e Lasso
"""

import pandas as pd
import numpy as np
from pandas import Series
import matplotlib.pyplot as plt
from sklearn.model_selection import GridSearchCV
from sklearn import linear_model
from sklearn.metrics import mean_squared_error

from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge

df = pd.read_csv("DbScalato.csv")
df.shape

#regressori
X = df[['picco_pressione_velocita_1', 'picco_coppia_finale', 'picco_portata_velocita_1', 'Temperatura', 
        'media_coppia_finale', 'picco_pressione_velocita_a_regime', 
        'picco_portata_velocita_a_regime','media_pressione_velocita_a_regime']].values

y = df['Coefficiente_140'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

"""**RIDGE**

Grid_search
"""

parameters = {'alpha': np.concatenate((np.arange(0.01,2,0.01), np.arange(2, 5, 1), np.arange(5, 25, 1)))}

ridge = linear_model.Ridge()

gridridge = GridSearchCV(ridge, parameters, scoring ='r2')

gridridge.fit(X_train, y_train)

print("ridge best parameters:", gridridge.best_params_)

print("ridge best estimator coef:", gridridge.best_estimator_.coef_)

"""Applichiamo best value al ridge"""

ridgeReg = Ridge(alpha=0.01, normalize=True)

ridgeReg.fit(X_train, y_train)

pred = ridgeReg.predict(X_test)

ridgeReg.score(X_test,y_test)

#df[['picco_pressione_velocita_1', 'picco_coppia_finale', 'picco_portata_velocita_1', 'Temperatura', 
        #'media_coppia_finale', 'picco_pressione_velocita_a_regime', 
        #'picco_portata_velocita_a_regime','media_pressione_velocita_a_regime']]

var = ['picco_pressione_velocita_1', 'picco_coppia_finale', 'picco_portata_velocita_1', 'Temperatura', 
        'media_coppia_finale', 'picco_pressione_velocita_a_regime', 
        'picco_portata_velocita_a_regime','media_pressione_velocita_a_regime']

coef = Series(ridgeReg.coef_, var).sort_values()

coef.plot(kind='bar', title='Modal Coefficients')

"""**Lasso**

Grid Search
"""

parameters = {'alpha': np.concatenate((np.arange(0.00001,0.001,0.01), np.arange(2, 5, 1), np.arange(5, 25, 1)))}

lasso = linear_model.Lasso()

gridlasso = GridSearchCV(lasso, parameters, scoring ='r2')

gridlasso.fit(X_train, y_train)

print("lasso best parameters:", gridlasso.best_params_)

print("lasso best estimator coef:", gridlasso.best_estimator_.coef_)

"""Applichiamo best value al lasso"""

from sklearn.linear_model import Lasso

lassoReg = Lasso(alpha=1e-05, normalize=True)

lassoReg.fit(X_train, y_train)

pred = lassoReg.predict(X_test)

lassoReg.score(X_test,y_test)

coef = Series(lassoReg.coef_, ora).sort_values()

coef.plot(kind='bar', title='Modal Coefficients')
